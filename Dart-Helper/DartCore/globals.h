#pragma once
#include <cstdint>

constexpr uint32_t kMaxUint32 = 0xFFFFFFFF;

enum DartVersion {
    DartUnknown = 0x0,
    Dart2_1_0,
    Dart2_1_2,
};

// System-wide named constants.
constexpr intptr_t KBLog2 = 10;
constexpr intptr_t KB = 1 << KBLog2;
constexpr intptr_t MBLog2 = KBLog2 + KBLog2;
constexpr intptr_t MB = 1 << MBLog2;
constexpr intptr_t GBLog2 = MBLog2 + KBLog2;
constexpr intptr_t GB = 1 << GBLog2;

void SetGlobalDartVersion(DartVersion ver);


enum ClassId : intptr_t {
    // Illegal class id.
    kIllegalCid = 0,
    kNativePointer = 1,
    kFreeListElement = 2,
    kForwardingCorpse = 3,
    kObjectCid = 4,
    kClassCid = 5,
    kPatchClassCid = 6,
    kFunctionCid = 7,
    kTypeParametersCid = 8,
    kClosureDataCid = 9,
    kFfiTrampolineDataCid = 10,
    kFieldCid = 11,
    kScriptCid = 12,
    kLibraryCid = 13,
    kNamespaceCid = 14,
    kKernelProgramInfoCid = 15,
    kWeakSerializationReferenceCid = 16,
    kCodeCid = 17,
    kInstructionsCid = 18,
    kInstructionsSectionCid = 19,
    kInstructionsTableCid = 20,
    kObjectPoolCid = 21,
    kPcDescriptorsCid = 22,
    kCodeSourceMapCid = 23,
    kCompressedStackMapsCid = 24,
    kLocalVarDescriptorsCid = 25,
    kExceptionHandlersCid = 26,
    kContextCid = 27,
    kContextScopeCid = 28,
    kSentinelCid = 29,
    kSingleTargetCacheCid = 30,
    kUnlinkedCallCid = 31,
    kMonomorphicSmiableCallCid = 32,
    kCallSiteDataCid = 33,
    kICDataCid = 34,
    kMegamorphicCacheCid = 35,
    kSubtypeTestCacheCid = 36,
    kLoadingUnitCid = 37,
    kErrorCid = 38,
    kApiErrorCid = 39,
    kLanguageErrorCid = 40,
    kUnhandledExceptionCid = 41,
    kUnwindErrorCid = 42,
    kInstanceCid = 43,
    kLibraryPrefixCid = 44,
    kTypeArgumentsCid = 45,
    kAbstractTypeCid = 46,
    kTypeCid = 47,
    kFunctionTypeCid = 48,
    kRecordTypeCid = 49,
    kTypeRefCid = 50,
    kTypeParameterCid = 51,
    kFinalizerBaseCid = 52,
    kFinalizerCid = 53,
    kNativeFinalizerCid = 54,
    kFinalizerEntryCid = 55,
    kClosureCid = 56,
    kNumberCid = 57,
    kIntegerCid = 58,
    kSmiCid = 59,
    kMintCid = 60,
    kDoubleCid = 61,
    kBoolCid = 62,
    kFloat32x4Cid = 63,
    kInt32x4Cid = 64,
    kFloat64x2Cid = 65,
    kRecordCid = 66,
    kTypedDataBaseCid = 67,
    kTypedDataCid = 68,
    kExternalTypedDataCid = 69,
    kTypedDataViewCid = 70,
    kPointerCid = 71,
    kDynamicLibraryCid = 72,
    kCapabilityCid = 73,
    kReceivePortCid = 74,
    kSendPortCid = 75,
    kStackTraceCid = 76,
    kSuspendStateCid = 77,
    kRegExpCid = 78,
    kWeakPropertyCid = 79,
    kWeakReferenceCid = 80,
    kMirrorReferenceCid = 81,
    kFutureOrCid = 82,
    kUserTagCid = 83,
    kTransferableTypedDataCid = 84,
    kMapCid = 85,
    kConstMapCid = 86,
    kSetCid = 87,
    kConstSetCid = 88,
    kArrayCid = 89,
    kImmutableArrayCid = 90,
    kGrowableObjectArrayCid = 91,
    kStringCid = 92,
    kOneByteStringCid = 93,
    kTwoByteStringCid = 94,
    kExternalOneByteStringCid = 95,
    kExternalTwoByteStringCid = 96,
    kFfiNativeFunctionCid = 97,
    kFfiInt8Cid = 98,
    kFfiInt16Cid = 99,
    kFfiInt32Cid = 100,
    kFfiInt64Cid = 101,
    kFfiUint8Cid = 102,
    kFfiUint16Cid = 103,
    kFfiUint32Cid = 104,
    kFfiUint64Cid = 105,
    kFfiFloatCid = 106,
    kFfiDoubleCid = 107,
    kFfiVoidCid = 108,
    kFfiHandleCid = 109,
    kFfiBoolCid = 110,
    kFfiNativeTypeCid = 111,
    kFfiStructCid = 112,
    kTypedDataInt8ArrayCid = 113,
    kTypedDataInt8ArrayViewCid = 114,
    kExternalTypedDataInt8ArrayCid = 115,
    kUnmodifiableTypedDataInt8ArrayViewCid = 116,
    kTypedDataUint8ArrayCid = 117,
    kTypedDataUint8ArrayViewCid = 118,
    kExternalTypedDataUint8ArrayCid = 119,
    kUnmodifiableTypedDataUint8ArrayViewCid = 120,
    kTypedDataUint8ClampedArrayCid = 121,
    kTypedDataUint8ClampedArrayViewCid = 122,
    kExternalTypedDataUint8ClampedArrayCid = 123,
    kUnmodifiableTypedDataUint8ClampedArrayViewCid = 124,
    kTypedDataInt16ArrayCid = 125,
    kTypedDataInt16ArrayViewCid = 126,
    kExternalTypedDataInt16ArrayCid = 127,
    kUnmodifiableTypedDataInt16ArrayViewCid = 128,
    kTypedDataUint16ArrayCid = 129,
    kTypedDataUint16ArrayViewCid = 130,
    kExternalTypedDataUint16ArrayCid = 131,
    kUnmodifiableTypedDataUint16ArrayViewCid = 132,
    kTypedDataInt32ArrayCid = 133,
    kTypedDataInt32ArrayViewCid = 134,
    kExternalTypedDataInt32ArrayCid = 135,
    kUnmodifiableTypedDataInt32ArrayViewCid = 136,
    kTypedDataUint32ArrayCid = 137,
    kTypedDataUint32ArrayViewCid = 138,
    kExternalTypedDataUint32ArrayCid = 139,
    kUnmodifiableTypedDataUint32ArrayViewCid = 140,
    kTypedDataInt64ArrayCid = 141,
    kTypedDataInt64ArrayViewCid = 142,
    kExternalTypedDataInt64ArrayCid = 143,
    kUnmodifiableTypedDataInt64ArrayViewCid = 144,
    kTypedDataUint64ArrayCid = 145,
    kTypedDataUint64ArrayViewCid = 146,
    kExternalTypedDataUint64ArrayCid = 147,
    kUnmodifiableTypedDataUint64ArrayViewCid = 148,
    kTypedDataFloat32ArrayCid = 149,
    kTypedDataFloat32ArrayViewCid = 150,
    kExternalTypedDataFloat32ArrayCid = 151,
    kUnmodifiableTypedDataFloat32ArrayViewCid = 152,
    kTypedDataFloat64ArrayCid = 153,
    kTypedDataFloat64ArrayViewCid = 154,
    kExternalTypedDataFloat64ArrayCid = 155,
    kUnmodifiableTypedDataFloat64ArrayViewCid = 156,
    kTypedDataFloat32x4ArrayCid = 157,
    kTypedDataFloat32x4ArrayViewCid = 158,
    kExternalTypedDataFloat32x4ArrayCid = 159,
    kUnmodifiableTypedDataFloat32x4ArrayViewCid = 160,
    kTypedDataInt32x4ArrayCid = 161,
    kTypedDataInt32x4ArrayViewCid = 162,
    kExternalTypedDataInt32x4ArrayCid = 163,
    kUnmodifiableTypedDataInt32x4ArrayViewCid = 164,
    kTypedDataFloat64x2ArrayCid = 165,
    kTypedDataFloat64x2ArrayViewCid = 166,
    kExternalTypedDataFloat64x2ArrayCid = 167,
    kUnmodifiableTypedDataFloat64x2ArrayViewCid = 168,
    kByteDataViewCid = 169,
    kUnmodifiableByteDataViewCid = 170,
    kByteBufferCid = 171,
    kNullCid = 172,
    kDynamicCid = 173,
    kVoidCid = 174,
    kNeverCid = 175,
    kNumPredefinedCids = 176,
};

template <class D, class S>
__forceinline D bit_cast(const S& source) {
    D destination;
    // This use of memcpy is safe: source and destination cannot overlap.
    memcpy(&destination, &source, sizeof(destination));
    return destination;
}

//现版本的ClassId转换成对应版本的ID
ClassId getClassId(ClassId);